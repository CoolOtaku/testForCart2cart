<?php
return [
    "next_task" => "Переходьте до другого завдання",

    "title1" => "Товари з сайту: zolotakraina.ua",
    "title2" => "Черга повідомлень",
    "title3" => "Кастомна artisan-команда",
    "title4" => "Скорочення посилання",
    "title5" => "Фабрика на прикладі тварин",
    "title6" => "Перенесення даних між різноманітними платформами",
    "title7" => "Вам потрібно оптимізувати роботу роботу сервісу",

    "price" => "Ціна",
    "uah" => "Грн",

    "message" => "Повідомлення",
    "status" => "Статус",
    "creation_date" => "Дата створення",
    "add_a_message" => "Додати повідомлення",
    "process_the_message" => "Опрацювати повідомлення",

    "enter_the_url" => "Введіть URL",
    "to_shorten" => "Скоротити",
    "abbreviated_url" => "Скорочений URL",

    "choose_an_animal" => "Виберіть тварину",
    "play_sound" => "Відтворити звук",

    "dog" => "Собака",
    "cat" => "Кіт",
    "mouse" => "Миша",
    "snake" => "Змія",
    "lion" => "Лев",

    "task6" => "
    <b class='text-xl'>1. Абстрагування даних та уніфікація форматів</b>
    <p>
    Створення уніфікованої моделі даних: Кожна платформа (наприклад, Shopify, Magento, WooCommerce, OpenCart, PrestaShop) має свої особливості структури даних. Для спрощення перенесення потрібно створити спільну проміжну модель (уніфікований формат даних), яка може представляти всі дані (продукти, категорії, замовлення, клієнти тощо) незалежно від платформи. Це дозволить легко перетворювати дані з одного формату в інший.
    <br><br>Конвертація специфічних форматів: Для кожної платформи необхідно реалізувати механізми для конвертації даних із специфічних форматів у спільний формат і навпаки.
    </p>
    <br>
    <b class='text-xl'>2. Підтримка API та баз даних</b>
    <p>
    Взаємодія з API платформ: Багато сучасних платформ для електронної комерції надають API для доступу до даних. Під час перенесення важливо використовувати офіційні API для підключення, збереження цілісності даних та забезпечення безпеки.
    <br><br>Пряма робота з базами даних: Деякі платформи можуть не мати API або їх API можуть бути обмеженими. У таких випадках необхідно працювати безпосередньо з базою даних (SQL або NoSQL) для доступу до інформації. Це вимагає ретельного аналізу структури баз даних кожної платформи.
    </p>
    <br>
    <b class='text-xl'>3. Адаптери для платформ</b>
    <p>
    Платформо-специфічні адаптери: Для кожної платформи слід розробити окремий \"адаптер\" або конектор, який відповідатиме за отримання та завантаження даних із/на цю платформу. Цей адаптер повинен враховувати всі особливості структури даних платформи, її API або бази даних.
    <br><br>Кросплатформений механізм трансформації: Кожен адаптер має вміти конвертувати дані з проміжного (уніфікованого) формату в формат цільової платформи і навпаки.
    </p>
    <br>
    <b class='text-xl'>4. Обробка великих обсягів даних</b>
    <p>
    Частковий експорт/імпорт: Деякі інтернет-магазини можуть містити великий обсяг даних (десятки тисяч продуктів або замовлень). Потрібно реалізувати підтримку часткової міграції або батчеву обробку даних для запобігання перевантаженню сервера.
    <br><br>Черги та багатопоточність: Використання черг (наприклад, Laravel Queue) дозволить обробляти великі обсяги даних поетапно і уникнути збоїв під час міграції.
    </p>
    <br>
    <b class='text-xl'>5. Валідність даних</b>
    <p>
    Перевірка та валідація: Потрібно перевіряти, чи коректно імпортуються дані, чи відповідають вони структурі та обмеженням цільової платформи. Наприклад, перевірка відповідності форматів полів (наприклад, ціна, кількість, SKU, URL-адреси).
    <br><br>Обробка помилок: Має бути реалізована система обробки та логування помилок під час перенесення (наприклад, відсутність полів, конфлікти SKU або іншої інформації). Це дозволить легко ідентифікувати та виправляти проблеми під час міграції.
    </p>
    <br>
    <b class='text-xl'>6. Безпека даних</b>
    <p>
    Захист даних під час передачі: При взаємодії з платформами через API або прямі підключення до баз даних потрібно забезпечити шифрування даних під час їх передачі для уникнення перехоплення або витоків.
    <br><br>Автентифікація та авторизація: API ключі, токени доступу та інші механізми безпеки повинні бути налаштовані відповідно до вимог кожної платформи.
    </p>
    <br>
    <b class='text-xl'>7. Сумісність та підтримка специфічних функцій</b>
    <p>
    Обробка специфічних функцій платформ: Деякі платформи можуть мати специфічні функції, такі як різні типи знижок, методи доставки або податкові налаштування, які не підтримуються на інших платформах. Потрібно визначити, як поводитися з такими унікальними даними (наприклад, ігнорувати, трансформувати або перенести у вигляді додаткових полів).
    <br><br>Підтримка локалізації та валют: При перенесенні потрібно враховувати різні валюти, мовні налаштування та локалізацію для платформ, що працюють у різних країнах.
    </p>
    <br>
    <b class='text-xl'>8. Тестування та симуляція</b>
    <p>
    Тестування процесу перенесення: Потрібно забезпечити можливість тестового перенесення даних для перевірки коректності без реального імпорту на цільову платформу. Це дозволить уникнути помилок у продуктивному середовищі.
    <br><br>Порівняння даних: Після міграції важливо мати можливість порівняти оригінальні дані на початковій платформі з імпортованими даними на новій платформі.
    </p>
    <br>
    <b class='text-xl'>Висновок:</b>
    <p>
    Реалізація переносу даних між великою кількістю платформ потребує розробки адаптивної архітектури з уніфікованою моделлю даних та платформо-специфічними адаптерами, враховуючи специфіку кожної платформи та забезпечуючи безпечність і надійність процесу.
    </p>
    ",
    "task7" => "
    <b class='text-xl'>1. Налаштування кешування</b>
    <p>
    Кешування на рівні веб-сервера: Використовуй кешування статичних ресурсів (CSS, JavaScript, зображення) за допомогою Nginx або Apache. Це зменшить навантаження на сервер та прискорить завантаження сторінок.
    <br><br>Кешування HTTP-відповідей: Налаштуй кешування для динамічних сторінок на рівні веб-сервера або через CDN (наприклад, Cloudflare). Це допоможе зменшити кількість запитів до бази даних та інших ресурсів.
    <br><br>Redis/Memcached: Якщо сервіс уже використовує базу даних, можна використовувати кешування запитів через зовнішній Redis або Memcached для зберігання результатів частих запитів.
    </p>
    <br>
    <b class='text-xl'>2. Оптимізація бази даних</b>
    <p>
    Індексація: Перевір наявність індексів у базі даних. Можна додати індекси до таблиць для покращення швидкості запитів без зміни коду програми.
    <br><br>Оптимізація запитів: Використовуй інструменти моніторингу баз даних, такі як MySQL EXPLAIN, щоб виявити \"важкі\" запити та оптимізувати їх за допомогою індексів або параметрів конфігурації бази даних.
    </p>
    <br>
    <b class='text-xl'>3. Балансування навантаження</b>
    <p>
    Load Balancer: Налаштуй балансувальник навантаження, щоб розподілити запити між кількома серверами. Це дозволить уникнути перевантаження одного сервера і підвищить загальну доступність сервісу.
    <br><br>Горизонтальне масштабування: Додай більше серверів у кластер і розподіли навантаження за допомогою балансувальника (наприклад, використовуючи AWS Load Balancer або Nginx).
    </p>
    <br>
    <b class='text-xl'>4. Оптимізація веб-сервера</b>
    <p>
    Конфігурація веб-сервера: Можна налаштувати веб-сервер для покращення продуктивності без зміни коду програми. Для Nginx або Apache можна збільшити кількість робочих процесів, налаштувати тайм-аути та кешування на сервері.
    <br><br>GZIP/ Brotli компресія: Увімкни GZIP або Brotli компресію для стиснення відповідей від сервера, щоб зменшити обсяг даних, що передається клієнтам.
    </p>
    <br>
    <b class='text-xl'>5. Використання CDN</b>
    <p>
    Content Delivery Network (CDN): Використай CDN для розподілу статичних ресурсів на сервери, географічно ближчі до користувачів. Це зменшить час відгуку та підвищить швидкість завантаження контенту.
    </p>
    <br>
    <b class='text-xl'>6. Оптимізація на рівні операційної системи</b>
    <p>
    Системні налаштування: Оптимізуй системні налаштування серверів, зокрема налаштування TCP, тайм-аути підключень та ліміти пам’яті для більшої стабільності та продуктивності.
    <br><br>Моніторинг ресурсів: Використовуй інструменти моніторингу (наприклад, New Relic, Prometheus, Grafana), щоб визначити \"вузькі місця\" у використанні ресурсів (процесор, пам’ять, дискові операції) і за потреби коригувати конфігурацію системи.
    </p>
    <br>
    <b class='text-xl'>7. Оптимізація на рівні мережі</b>
    <p>
    Зменшення затримки в мережі: Використовуй кешуючі проксі-сервери або реплікацію даних на різних серверах для зменшення затримки в мережі та швидшого доступу до контенту.
    <br><br>Оптимізація DNS: Налаштування швидших DNS-серверів може прискорити процес вирішення імен доменів, що може покращити швидкість завантаження сторінок.
    </p>
    <br>
    <b class='text-xl'>8. Моніторинг та аналіз</b>
    <p>
    Моніторинг логів: Аналізуй логи сервера для виявлення проблемних запитів або частих помилок.
    <br><br>Інструменти моніторингу: Використовуй сервіси для аналізу продуктивності (як-от New Relic, Datadog, Zabbix) для оцінки роботи сервісу та виявлення потенційних точок для оптимізації.
    </p>
    <br>
    <p>
    Таким чином, можна значно покращити продуктивність сервісу навіть без внесення змін у його код, використовуючи зовнішні оптимізації та налаштування.
    </p>
    "
];
